import sys
import time
class Solution:
    # @param {integer[]} nums
    # @param {integer} target
    # @return {integer}
    def threeSumClosest(self, nums, target):
        nums_len = len(nums)
        if nums_len == 0:
            return 0

        time_begin = time.time()
        d_count = {}
        for num in nums:
            v = d_count.get(num, None)
            if v:
                d_count[num] = d_count[num] + 1
            else:
                d_count[num] = 1
        nums = d_count.keys()
        nums.sort()
        nums_len = len(nums)

        #print 'new nums:',nums
        #print 'd_count:', d_count

        time_end = time.time()
        print 'make d_count time:', time_end - time_begin
        time_begin = time_end

        delta_dict = {} # value: (num[i], num[j], i, j)
        for i in range(nums_len):
            for j in range(nums_len):
                if i == j and d_count[nums[i]] < 2:
                    continue
                delta = target - (nums[i] + nums[j])
                v = delta_dict.get(delta, None)
                if v:
                    delta_dict[delta] = delta_dict[delta] + [(nums[i], nums[j], i, j)]
                else:
                    delta_dict[delta] = [(nums[i], nums[j], i, j)]
        time_end = time.time()
        print 'make dict time:', time_end - time_begin
        time_begin = time_end
        #print 'delta_dict:', delta_dict
        #print 'dict_count:', len(delta_dict.keys())
        result = 0
        min_delta = sys.maxint
        for delta, values in delta_dict.iteritems():
            min_delta_index = self.binarySearchMinDeltaIndex(nums, 0, nums_len - 1, delta)
            for num1, num2, index1, index2 in values:
                if min_delta_index == index1 and d_count[nums[min_delta_index]] < 2:
                    continue
                if min_delta_index == index2 and d_count[nums[min_delta_index]] < 2:
                    continue
                tmp_delta = delta - nums[min_delta_index]
                if tmp_delta < 0:
                    tmp_delta = 0 - tmp_delta
                if tmp_delta == 0:
                    print 'get target:'
                    print '[%d]%d [%d]%d [%d]%d' % (index1, num1, index2, num2, min_delta_index, nums[min_delta_index])
                    return target
                if tmp_delta < min_delta:
                    min_delta = tmp_delta
                    result = num1 + num2 + nums[min_delta_index]
                #print 'delta:', delta, 'num1:', num2, ' num2:', num2, ' min_delta_index:', min_delta_index, ' num:', nums[min_delta_index]
        time_end = time.time()
        print 'search target time:', time_end - time_begin
        return result
                
            
    def binarySearchMinDeltaIndex(self, nums, low, high, val):
        if nums[high] <= val:
            return high
        if val <= nums[low]:
            return low
        if high - low == 1:
            if val - nums[low] < nums[high] - val:
                return low
            else:
                return high
        mid = (low + high) / 2
        if (nums[mid] == val):
            return mid;
        elif (nums[mid] < val):
            return self.binarySearchMinDeltaIndex(nums, mid, high, val)
        else:
            return self.binarySearchMinDeltaIndex(nums, low, mid, val)
                
s = Solution()
nums = [43,75,-90,47,-49,72,17,-31,-68,-22,-21,-30,65,88,-75,23,97,-61,53,87,-3,33,20,51,-79,43,80,-9,34,-89,-7,93,43,55,-94,29,-32,-49,25,72,-6,35,53,63,6,-62,-96,-83,-73,66,-11,96,-90,-27,78,-51,79,35,-63,85,-82,-15,100,-82,1,-4,-41,-21,11,12,12,72,-82,-22,37,47,-18,61,60,55,22,-6,26,-60,-42,-92,68,45,-1,-26,5,-56,-1,73,92,-55,-20,-43,-56,-15,7,52,35,-90,63,41,-55,-58,46,-84,-92,17,-66,-23,96,-19,-44,77,67,-47,-48,99,51,-25,19,0,-13,-88,-10,-67,14,7,89,-69,-83,86,-70,-66,-38,-50,66,0,-67,-91,-65,83,42,70,-6,52,-21,-86,-87,-44,8,49,-76,86,-3,87,-32,81,-58,37,-55,19,-26,66,-89,-70,-69,37,0,19,-65,38,7,3,1,-96,96,-65,-52,66,5,-3,-87,-16,-96,57,-74,91,46,-79,0,-69,55,49,-96,80,83,73,56,22,58,-44,-40,-45,95,99,-97,-22,-33,-92,-51,62,20,70,90]
#target = 284
target = 284
print 'nums:',nums
print 'target:', target
result = s.threeSumClosest(nums, target)
print 'result:', result

